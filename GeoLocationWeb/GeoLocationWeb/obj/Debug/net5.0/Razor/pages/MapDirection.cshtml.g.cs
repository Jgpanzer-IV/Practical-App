#pragma checksum "D:\Software_Development\PracticalApps\GeoLocationWeb\GeoLocationWeb\pages\MapDirection.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "776f2b2b635dd636cf7faf8ade782f9a01b8df05"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.pages_MapDirection), @"mvc.1.0.razor-page", @"/pages/MapDirection.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"776f2b2b635dd636cf7faf8ade782f9a01b8df05", @"/pages/MapDirection.cshtml")]
    public class pages_MapDirection : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
            WriteLiteral("\r\n");
            WriteLiteral(@"
<div class=""jumbotron text-center p-5 shadow"">
	
	<h1>Map Direction</h1>
	<hr />
	<p style=""text-indent:60px"">This is a page that show how to Use Google map direction api, In the code behind
		having a code example as a best practic.
	</p>

</div>

<div class=""shadow rounded my-5 p-5"">


	<div class=""row"">
		<div class=""col-md-6"">
			<label for=""LatSrcGetter"" class=""lead"">Source Latitude</label>
			<input class=""form-control""  type=""text"" id=""LatSrcGetter"" />
		</div>
		<div class=""col-md-6"">
			<label for=""LongSrcGetter"" class=""lead"">Source Longitude</label>
			<input class=""form-control""  type=""text"" id=""LongSrcGetter""/>
		</div>
	</div>

	<div class=""row"">
		<div class=""col-md-6"">
			<label for=""LatDstGetter"" class=""lead"">Destination Latitude</label>
			<input class=""form-control"" type=""text"" id=""LatDstGetter"" />
		</div>
		<div class=""col-md-6"">
			<label for=""LongDstGetter"" class=""lead"">Destination Longitude</label>
			<input class=""form-control""  type=""text"" id=""LongDstG");
            WriteLiteral(@"etter""/>
		</div>
	</div>
	<div class=""my-4"">
		<button id=""Calculate"" onclick=""getMap()"" class=""btn btn-success"">Calculate Map</button>
	</div>

</div>

<div class=""rounded shadow"" style=""height:800px; width:100%;"">

	<div id=""displayMap"" style=""width:100%; height:100%;"">-</div>

</div>

<script src=""https://maps.googleapis.com/maps/api/js?sensor=true&key=AIzaSyDiwBlGIQmnaVtDhVK8p-SBQ8-LyRMLU1c""></script>

<script type=""text/javascript"">
	
	var points = [{},{}];

	var map;

	function getMap(){
		points[0].lat = document.getElementById(""LatSrcGetter"").value;
		points[0].long = document.getElementById(""LongSrcGetter"").value;
		

		points[1].lat = document.getElementById(""LatDstGetter"").value;
		points[1].long = document.getElementById(""LongDstGetter"").value;

		const centerLocation = {lat: parseFloat(points[0].lat) , lng: parseFloat(points[0].long)};
		const destLocation = {lat: parseFloat(points[1].lat), lng: parseFloat(points[1].long)};

		alert(points[0].lat);
		alert(poin");
            WriteLiteral(@"ts[0].long);
		
		var mapOption = {
			center: centerLocation,
			zoom: 10,
			mapTypeId: google.maps.MapTypeId.HYBRID
		};

		

		map = new google.maps.Map(document.getElementById(""displayMap""),mapOption);
	
	
			
		var marker = new google.maps.Marker({
			position: centerLocation,
			map:map
			
		});
		var marker = new google.maps.Marker({
			position: destLocation,
			map:map
			
		}); 

		drawPath();

	}

	function drawPath(){
		
		var directionsService = new google.maps.DirectionsService();
		alert(""Service Created"");
		var poly = new google.maps.Polyline({strokeColor:""#FF0000"", strokeWeight:4});
		alert(""Start deaw"");
		var request = {
			origin: new google.maps.LatLng(points[0].lat, points[0].long),
			destination: new google.maps.LatLng(points[1].lat, points[1].long),
			travelMode: google.maps.DirectionsTravelMode.DRIVING
		};
		alert(""Sent Request"");

		directionsService.route(request, function(response, status){
			if (status == google.maps.DirectionsStat");
            WriteLiteral("us.OK)\r\n\r\n\t\t\t{\r\n\r\n\t\t\t\tnew google.maps.DirectionsRenderer({\r\n\r\n\t\t\t\t\tmap:map,\r\n\t\t\t\t\tpolylineOptions: poly,\r\n\t\t\t\t\tdirections:response\r\n\t\t\t\t});\r\n\r\n\t\t\t}\r\n\t\t});\r\n\t\talert(\"Complete Draw direction line\");\r\n\t\t\r\n\t}\r\n\r\n</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<pages_MapDirection> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<pages_MapDirection> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<pages_MapDirection>)PageContext?.ViewData;
        public pages_MapDirection Model => ViewData.Model;
    }
}
#pragma warning restore 1591
