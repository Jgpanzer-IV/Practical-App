#pragma checksum "D:\Software_Development\PracticalApps\GeoLocationWeb\GeoLocationWeb\pages\DistanceCalculator.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "551112ad05f39439089d7e47249995cc88011ab1"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.pages_DistanceCalculator), @"mvc.1.0.razor-page", @"/pages/DistanceCalculator.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"551112ad05f39439089d7e47249995cc88011ab1", @"/pages/DistanceCalculator.cshtml")]
    public class pages_DistanceCalculator : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 6 "D:\Software_Development\PracticalApps\GeoLocationWeb\GeoLocationWeb\pages\DistanceCalculator.cshtml"
  
	ViewData["Title"] = "Distance Calculator";


#line default
#line hidden
#nullable disable
            WriteLiteral(@"

<div class="" rounded shadow m-5 p-5 text-right bg-dark"">

	<div class=""d-inline-block bg-danger"" style=""width:20%;"">
		<button class=""btn btn-info d-block m-0"" onclick=""getCurrent()"">Get current position</button>
	</div>
	<div class=""d-inline-block  bg-danger"" style=""width:60%;"">
		<input type=""text"" id=""currentLocation"" class=""form-control d-block"" placeholder=""Current location""/>
	</div>
	
	
	<div class=""form-group w-100 my-4"">
		<label for=""destinationLocation"" class=""d-block w-100"">Destication Location</label>
		<input type=""text"" id=""destinationLocation"" class=""form-control""/>
	</div>

	<button class=""btn btn-info w-100 d-block"" onclick=""calcualteDistance()"">Calculate</button>

	<p class=""lead"" >
		Distance : <h1 id=""lblDistance"" class=""lead text-white""></h1> Kilometers away from your position
	</p>

</div>

<div class=""jumbotron m-5 p-5 rounded bg-dark shadow text-center"">
	<p class=""display-6 text-danger bg-gray"" id=""errorAccess""></p>
</div>


<script type=""text/javascri");
            WriteLiteral(@"pt"">
	
	// Get current position as latitude and longitude
	function getCurrent(){
	
		if (navigator.geolocation){
			navigator.geolocation.getCurrentPosition(success,error,
				{	enableHighAccuracy: true,
					maximumAge:5000,
					timeout: 10000
				});
		}else{
			document.getElementById(""errorAccess"").innerHTML = ""You're not allowed to access the position, Please allow the service to access your location."";
		}
	}
	

	// Success access position call back
	function success(position){
		var currentLat  = position.coords.latitude;
		var currentLong = position.coords.longitude; 

		document.getElementById(""currentLocation"").value = currentLat +','+ currentLong;

		var destPosi = document.getElementById(""destinationLocation"").value;

		var latlongDest = getLatLong(destPosi);
		
		var latDest = latlongDest.latitude;
		var longDest = latlongDest.longitude;

		alert(""Result : ""+latDest+"" ""+longDest);

		var dist = Math.round(calcualteDistance(currentLat,currentLong,latDest,longDest");
            WriteLiteral(@")*100)/100;
		document.getElementById(""lblDistance"").innerHTML = dist;
	}

	function error(error){
		
		switch(error.code){
			
			case PERMISSION_DENIED:
				alert(""User denied access position"");
			break;

			case TIMEOUT:
				alert(""Time out access position"");
			break;

			case POSITION_UNAVAILABLE:
				alert(""Position unavailable"");
			break;

			default:
				alert(""Unknown error"");
			break;
		
		}
		
	}

	// Revert from address humen read able to latitude and longitude
	function getLatLong(address){
		var localAddress = address.replace("" "",""+"");
		var url = ""https://maps.googleapis.com/maps/api/geocode/json?address=""+ localAddress +""&key=AIzaSyDiwBlGIQmnaVtDhVK8p-SBQ8-LyRMLU1c"";
		
		var xmlHttpAdder = new XMLHttpRequest();
		xmlHttpAdder.open(""GET"",url,false);
		xmlHttpAdder.send()
		alert(""Address destination : ""+localAddress);

		if (xmlHttpAdder.readyState == 4 && xmlHttpAdder.status == 200){
			alert(""Success request"");

			// Store json object 
			var res");
            WriteLiteral(@"ult = xmlHttpAdder.responseText;
		
			// Convert json object into javascript object
			var jsObj = eval(""(""+result+"")"");
			
			// Get the value inside the javascript object
			var latDest = jsObj.results[0].geometry.location.lat;
			var longDest = jsObj.results[0].geometry.location.lng;

			
			return {latitude: latDest, longitude: longDest};
		}
	}

	function calcualteDistance(latSource,longSource, latDest, longDest){
		
		// Step 1 : Convert value into radians value to calcualte in the Fomular
		var latSourceRadians  = latSource * Math.PI / 180;
		var longSourceRadians = longSource * Math.PI/ 180;
		var latDestRadians = latDest * Math.PI / 180;
		var longDestRadians = longDest * Math.PI / 180; 

		// Step 2 : Calculating in the Haversine formula
		// this will return in 'mile' format
		var distance = 3959 * Math.acos(
			Math.cos(latSourceRadians) * Math.cos(latDestRadians) *
			Math.cos(longSourceRadians - longDestRadians) + 
			Math.sin(latSourceRadians) * Math.sin(latDestRadi");
            WriteLiteral("ans)\r\n\t\t);\r\n\t\t\r\n\t\t// Step 3 : Convert into kilometer \r\n\t\tdistance = distance * 1.609344;\r\n\t\talert(distance+\" Kilometer\");\r\n\t\treturn distance;\r\n\t}\r\n\r\n\r\n</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<pages_DistanceCalculator> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<pages_DistanceCalculator> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<pages_DistanceCalculator>)PageContext?.ViewData;
        public pages_DistanceCalculator Model => ViewData.Model;
    }
}
#pragma warning restore 1591
